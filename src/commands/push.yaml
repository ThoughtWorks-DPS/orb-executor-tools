# src/commands/push.yaml

description: Publish docker image to a registry

parameters:

  registry:
    description: Name of registry
    type: string
    default: docker.io

  image:
    description: Name of image
    type: string

  tag:
    description: Value for tag
    type: string
    default: $CIRCLE_SHA1

  docker-login:
    description: username for reigstry access
    type: env_var_name
    default: DOCKER_LOGIN

  docker-password:
    description: password for registry access
    type: env_var_name
    default: DOCKER_PASSWORD

  aws-ecr:
    description: Use aws ecr
    type: boolean
    default: false

  aws-role:
    description: Assume aws role as part of authentication
    type: string
    default: ""

  aws-access-key-id:
    description: password for registry access
    type: env_var_name
    default: AWS_ACCESS_KEY_ID

  aws-secret-access-key:
    description: password for registry access
    type: env_var_name
    default: AWS_SECRET_ACCESS_KEY

  aws-region:
    description: AWS region used for aws credentials
    type: string
    default: $AWS_DEFAULT_REGION

steps:
  - unless:
      condition: << parameters.aws-ecr >>
      name: Publish a tagged image to the docker registry
      steps:
        - run:
            command: |
              echo $<< parameters.docker-password >> | docker login -u $<< parameters.docker-login >> --password-stdin << parameters.registry >>
              docker push << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>
  - when:
      condition: << parameters.aws-ecr >>
      name: Publish a tagged image to the aws ecr registry
      steps:
        - run:
            command: |
              if [ "<< parameters.aws-role >>" ]; then
                TMP="$(aws sts assume-role --output json --role-arn << parameters.aws-role >> --role-session-name 'orb-executor-tools-pipeline' || { echo 'sts failure!' ; exit 1; })"
                export AWS_ACCESS_KEY_ID=$(echo $TMP | jq -r ".Credentials.AccessKeyId")
                export AWS_SECRET_ACCESS_KEY=$(echo $TMP | jq -r ".Credentials.SecretAccessKey")
                export AWS_SESSION_TOKEN=$(echo $TMP | jq -r ".Credentials.SessionToken")
              fi
              aws ecr get-login-password --region << parameters.aws-region >> | docker login --username AWS --password-stdin "<< parameters.registry >>/<< parameters.image >>"
              docker push << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>
        # - run:
        #     environment:
        #       AWS_ROLE: << parameters.aws-role >>
        #       AWS_ACCESS_KEY_ID: << parameters.aws-access-key-id >>
        #       AWS_SECRET_ACCESS_KEY: << parameters.aws-secret-access-key >>
        #       AWS_DEFAULT_REGION: << parameters.aws-region >>
        #       REGISTRY: << parameters.registry >>
        #       IMAGE: << parameters.image >>
        #       TAG: << parameters.tag >>
        #     command: << include(scripts/aws-push.sh) >>
