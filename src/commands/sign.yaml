# src/commands/sign.yaml

description: Sign oci image using cosign

parameters:

  registry:
    description: full registry path for writing signature
    type: string

  image:
    description: Name of image
    type: string

  tag:
    description: Value for tag
    type: string

  attestations:
    description: attestations to include in signature
    type: string
    default: ""

  sbom:
    description: include a software bill of materials with the signature
    type: boolean
    default: false

  sbom-format:
    description: sbom format
    type: enum
    enum: [syft-json, cyclonedx-xml, cyclonedx-json, github-json, spdx-tag-value, spdx-json, syft-table, syft-text, template]
    default: cyclonedx-json

  sign-key:
    description: path to private key used to sign image
    type: string
    default: cosign.key

  verify-key:
    description: path to public key used to verify signature
    type: string
    default: cosign.pub

  cosign-password:
    description: signing key passphrase
    type: env_var_name
    default: COSIGN_PASSWORD

steps:
  - run:
      name: Confirm signing parameters are set; key path, COSIGN_PASSWORD
      command: |
        if [ ! -f << parameters.sign-key >> ]; then
          echo "signing key not available; not able to sign image."
          exit 1
        fi

        if [ ! -f << parameters.verify-key >> ]; then
          echo "verification key not available; not able to validate signing process."
          exit 1
        fi

        if [ ! ${<< parameters.cosign-password >>-} ]; then
          echo "signing key passphrase is not available; not able to sign image."
          exit 1
        fi
  - run:
      name: get image manifest id
      command: docker image inspect --format='{{index .RepoDigests 0}}' << parameters.registry >>/<< parameters.image >>:<< parameters.tag >> > manifestid
  - when:
      condition: << parameters.sbom >>
      steps:
        - run:
            name: generate sbom using syft
            command: syft packages --output cyclonedx-json $(cat manifestid) > sbom.json
        - run:
            name: Sign oci image, including sbom in the signature annotations, and store signature to registry
            command: |
              cosign sign --key cosign.key \
                          --annotations sbom="$(cat sbom.json)" \
                          $(cat manifestid) -y
  - run:
      name: Sign oci image and store signature to registry
      command: |
        cosign sign --key << parameters.sign-key >> \
            <<#parameters.attestations>> << parameters.attestations >> <</parameters.attestations>> \
             $(cat manifestid) -y
