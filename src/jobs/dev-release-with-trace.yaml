# src/jobs/dev-release-with-trace.yaml

description: Continuous integration and development build of circleci remote-docker executor.

executor:
  name: circleci-executor-builder
  image: << parameters.executor-image >>
  resource-class: << parameters.executor-resource-class >>
  username: << parameters.executor-registry-username >>
  password: << parameters.executor-registry-password >>

shell: << parameters.shell >>

parameters:

  shell:
    description: Default shell invocation. Override to support different shells or tools like 1password.
    type: string
    default: /bin/bash -eo pipefail

  executor-image:
    description: Executor used for orb jobs.
    type: string
    default: docker.io/twdps/circleci-executor-builder:alpine-stable

  executor-registry-username:
    description: Environment variable to reference as username for the registry specified by executor-image parameter
    type: env_var_name
    default: DOCKER_LOGIN

  executor-registry-password:
    description: Environment variable to reference as password for the registry specified by executor-image parameter
    type: env_var_name
    default: DOCKER_PASSWORD

  executor-resource-class:
    description: Executor resource class.
    type: enum
    enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
    default: medium

  registry:
    description: Container registry.
    type: string
    default: docker.io

  registry-login:
    description: Environment variable to reference as username for registry login.
    type: env_var_name
    default: DOCKER_LOGIN

  registry-password:
    description: Environment variable to reference as password for registry login.
    type: env_var_name
    default: DOCKER_PASSWORD

  aws-ecr:
    description: Use aws elastic container registry?
    type: boolean
    default: false

  dockerfile:
    description: Name of dockerfile.
    type: string
    default: Dockerfile

  path:
    description: Path to the directory containing your Dockerfile and build context.
    type: string
    default: .

  image:
    description: Name of image.
    type: string

  tag:
    description: Image tag for dev-build.
    type: string
    default: dev.${CIRCLE_SHA1:0:7}

  tag-annotation:
    description: Additional text prepended to semantic version tag.
    type: string
    default: ""

  docker-cve-scan:
    description: Perform snyk.io docker image cve scan.
    type: boolean
    default: false

  severity-threshold:
    description: cve test reporting threshold.
    type: string
    default: "low"

  snyk-organization:
    description: Associated snyk.io organization.
    type: string
    default: ""

  snyk-token:
    description: snyk.io api-token.
    type: env_var_name
    default: SNYK_TOKEN

  skip-base-image:
    description: Skip performing cve scan of base image.
    type: boolean
    default: false

  cis-docker-image-scan:
    description: Perform CIS Dockerfile Benchmark Section 4 assessment
    type: boolean
    default: false

  bats-test:
    description: Run container configuration check using bats.
    type: boolean
    default: false

  inspec-test:
    description: Run container configuration check using inspec.
    type: boolean
    default: false

  container-name:
    description: Name for running container during bats/inspec test.
    type: string
    default: container-test

  entry-point:
    description: name of shell ( bash | ash | etc)
    type: string
    default: /bin/bash

  test-path:
    description: Name of folder with tests
    type: string
    default: test

  extra-build-args:
    description: >
      Extra flags to pass to docker build. For examples, see
      https://docs.docker.com/engine/reference/commandline/build
    type: string
    default: ""

  after-checkout:
    description: Optional steps to run after checking out the code.
    type: steps
    default: []

  before-build:
    description: Optional steps to run before building the docker image.
    type: steps
    default: []

  after-build:
    description: Optional steps to run after building the docker image.
    type: steps
    default: []

steps:
  - checkout
  - trace-build-start
  - setup_remote_docker
  - lint:
      dockerfile: << parameters.dockerfile >>
      honeycomb-trace: true
  # - when:
  #     condition:
  #       and:
  #         - << parameters.honeycomb-trace >>
  #         - << parameters.after-checkout >>
  #     steps:
        # - trace-step-start:
        #     id: after-checkout
  - when:
      name: Run after_checkout lifecycle hook steps.
      condition: << parameters.after-checkout >>
      steps:
        - trace-step-start:
            id: after-checkout
        - steps: << parameters.after-checkout >>
        - trace-step-stop:
            id: after-checkout
  # - when:
  #     name: stop after-checkout span
  #     condition:
  #       and:
  #         - << parameters.honeycomb-trace >>
  #         - << parameters.after-checkout >>
  #     steps:
  #       - trace-step-stop:
  #           id: after-checkout
  - confirm-registry:
      registry: << parameters.registry >>
      registry-login: << parameters.registry-login >>
      registry-password: << parameters.registry-password >>
      aws-ecr: << parameters.aws-ecr >>
      honeycomb-trace: true
  # - when:
  #     name: start before-build span
  #     condition:
  #       and:
  #         - << parameters.honeycomb-trace >>
  #         - << parameters.before-build >>
  #     steps:
  #       - trace-step-start:
  #           id: before-build
  - when:
      name: Run before_build lifecycle hook steps.
      condition: << parameters.before-build >>
      steps:
        - trace-step-start:
            id: before-build
        - steps: << parameters.before-build >>
        - trace-step-start:
            id: before-build
  # - when:
  #     name: stop before-build span
  #     condition:
  #       and:
  #         - << parameters.honeycomb-trace >>
  #         - << parameters.before-build >>
  #     steps:
  #       - trace-step-start:
  #           id: before-build
  - build:
      dockerfile: << parameters.dockerfile >>
      path: << parameters.path >>
      image: << parameters.image >>
      tag: << parameters.tag-annotation >><< parameters.tag >>
      registry: << parameters.registry >>
      extra-build-args: << parameters.extra-build-args >>
      honeycomb-trace: true
  - when:
      name: perform CIS Docker Benchmark section 4 scan
      condition: << parameters.cis-docker-image-scan >>
      steps:
        - cis-scan:
            dockerfile: << parameters.dockerfile >>
            honeycomb-trace: true
  - when:
      name: Perform snyk cve scan
      condition: << parameters.docker-cve-scan >>
      requires:
        - build
      steps:
        - cve-scan:
            registry: << parameters.registry >>
            image: << parameters.image >>
            tag: << parameters.tag-annotation >><< parameters.tag >>
            dockerfile: << parameters.dockerfile >>
            severity-threshold: << parameters.severity-threshold >>
            snyk-organization: << parameters.snyk-organization >>
            snyk-token: << parameters.snyk-token >>
            skip-base-image: << parameters.skip-base-image >>
            honeycomb-trace: true
  - when:
      name: perform bats container configuration test
      condition: << parameters.bats-test >>
      requires:
        - build
      steps:
        - bats:
            registry: << parameters.registry >>
            image: << parameters.image >>
            tag: << parameters.tag-annotation >><< parameters.tag >>
            container-name: << parameters.container-name >>
            entry-point: << parameters.entry-point >>
            test-path: << parameters.test-path >>
            honeycomb-trace: true
  - when:
      name: perform inspec container configuration test
      condition: << parameters.inspec-test >>
      requires:
        - build
      steps:
        - inspec:
            registry: << parameters.registry >>
            image: << parameters.image >>
            tag: << parameters.tag-annotation >><< parameters.tag >>
            container-name: << parameters.container-name >>
            entry-point: << parameters.entry-point >>
            test-path: << parameters.test-path >>
            honeycomb-trace: true
  # - when:
  #     name: start after-build span
  #     condition:
  #       and:
  #         - << parameters.honeycomb-trace >>
  #         - << parameters.after-build >>
  #     steps:
  #       - trace-step-start:
  #           id: after-build
  - when:
      name: Run after_build lifecycle hook steps.
      condition: << parameters.after-build >>
      steps:
        - trace-step-start:
            id: after-build
        - steps: << parameters.after-build >>
        - trace-step-stop:
            id: after-build
  # - when:
  #     name: stop after-build span
  #     condition:
  #       and:
  #         - << parameters.honeycomb-trace >>
  #         - << parameters.after-build >>
  #     steps:
  #       - trace-step-stop:
  #           id: after-build
  - push:
      registry: << parameters.registry >>
      image: << parameters.image >>
      tag: << parameters.tag-annotation >><< parameters.tag >>
      honeycomb-trace: true
  - run: buildevents build $CIRCLE_BUILD_NUM $(cat buildevents-workspace/build_start) success
