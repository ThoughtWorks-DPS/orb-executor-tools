# src/jobs/publish.yaml

description: Tag and publish a release version

executor:
  name: circleci-executor-builder
  image: << parameters.executor-image-name >>
  resource-class: << parameters.executor-resource-class >>
shell: << parameters.shell >>

parameters:

  shell:
    description: default shell invocation. Override to support different shells or tools like 1password
    type: string
    default: /bin/sh -eo pipefail

  executor-image-name:
    description: specify machine executor
    type: string
    default: docker.io/twdps/circleci-executor-builder:alpine-stable

  executor-resource-class:
    description: specify executor resource class. Default is medium.
    type: enum
    enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
    default: medium

  registry:
    description: Name of registry
    type: string
    default: docker.io

  image:
    description: Name of image
    type: string

  pull-tag:
    description: Value for tag to pull and make publish release
    type: string
    default: dev.${CIRCLE_SHA1:0:7}

  tag-annotation:
    description: Additional text for semantic version tag
    type: string
    default: ""

  release-tag:
    description: Value for an additional release tag.
    type: string
    default: latest

  registry-login:
    description: username for reigstry access
    type: env_var_name
    default: DOCKER_LOGIN

  registry-password:
    description: password for registry access
    type: env_var_name
    default: DOCKER_PASSWORD

  aws-ecr:
    description: use aws elastic container registry
    type: boolean
    default: false

  release-notes:
    description: use github-release-notes to automatically generate release
    type: boolean
    default: false

  clean-tags:
    description: steps to perform when cleaning up development tags
    type: steps
    default: []

  sign-image:
    description: Sign OCI image using cosign
    type: boolean
    default: false

  sbom:
    description: include a software bill of materials with the signature
    type: boolean
    default: false

  sbom-filename:
    description: name of generate sbom file
    type: string
    default: sbom.spdx

  attestations:
    description: attestations to include in signature
    type: string
    default: ""

  sign-key:
    description: path to private key used to sign image
    type: string
    default: cosign.key

  verify-key:
    description: path to public key used to verify signature
    type: string
    default: cosign.pub

  cosign-password:
    description: signing key passphrase
    type: env_var_name
    default: COSIGN_PASSWORD

  after-checkout:
    description: Optional steps to run after checking out the code.
    type: steps
    default: []

  after-publish:
    description: Optional steps to run after publishing the docker image.
    type: steps
    default: []

steps:
  - checkout
  - setup_remote_docker
  - when:
      name: Run after_checkout lifecycle hook steps.
      condition: << parameters.after-checkout >>
      steps: << parameters.after-checkout >>
  - confirm-registry:
      registry: << parameters.registry >>
      registry-login: << parameters.registry-login >>
      registry-password: << parameters.registry-password >>
      aws-ecr: << parameters.aws-ecr >>
  - pull:
      registry: << parameters.registry >>
      image: << parameters.image >>
      tag: << parameters.pull-tag >>
  - tag:
      registry: << parameters.registry >>
      image: << parameters.image >>
      tag: << parameters.pull-tag >>
      release: << parameters.tag-annotation >>$CIRCLE_TAG
  - tag:
      registry: << parameters.registry >>
      image: << parameters.image >>
      tag: << parameters.pull-tag >>
      release: << parameters.release-tag >>
  - push:
      registry: << parameters.registry >>
      image: << parameters.image >>
      tag: << parameters.tag-annotation >>$CIRCLE_TAG
  - push:
      registry: << parameters.registry >>
      image: << parameters.image >>
      tag: << parameters.release-tag >>
  - when:
      name: Run after_publish lifecycle hook steps.
      condition: << parameters.after-publish >>
      steps: << parameters.after-publish >>
  - when:
      name: Sign image using cosign
      condition: << parameters.sign-image >>
      steps:
        - sign:
            registry: << parameters.registry >>
            image: << parameters.image >>
            tag: << parameters.release-tag >>
            attestations: << parameters.attestations >>
            sign-key: << parameters.sign-key >>
            verify-key: << parameters.verify-key >>
            cosign-password: << parameters.cosign-password >>
  - when:
      name: generate sbom using syft
      condition: << parameters.sbom >>
      steps:
        - sbom:
            registry: << parameters.registry >>
            registry-login: << parameters.registry-login >>
            registry-password: << parameters.registry-password >>
            sbom-filename: << parameters.sbom-filename >>
  - when:
      name: clean up development (dev.SHA1) tags
      condition: << parameters.clean-tags >>
      steps: << parameters.clean-tags >>
  - when:
      name: generate release notes
      condition: << parameters.release-notes >>
      steps:
        - release-notes
