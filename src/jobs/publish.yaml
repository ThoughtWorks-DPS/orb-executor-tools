# src/jobs/publish.yaml
---
description: Tag and publish a release version

executor:
  name: circleci-executor-builder
  image: << parameters.executor-image-name >>
  resource-class: << parameters.executor-resource-class >>
  registry-login: << parameters.registry-login >>
  registry-password: << parameters.registry-password >>

shell: << parameters.shell >>

parameters:

  shell:
    description: default shell invocation. Override to support different shells or tools like 1password
    type: string
    default: /bin/bash -eo pipefail

  executor-image-name:
    description: specify machine executor
    type: string
    default: docker.io/twdps/circleci-executor-builder:alpine-stable

  registry-login:
    description: Environment variable to reference as username for the registry specified by executor-image-name parameter
    type: env_var_name
    default: DOCKER_LOGIN

  registry-password:
    description: Environment variable to reference as password for the registry specified by executor-image parameter
    type: env_var_name
    default: DOCKER_PASSWORD

  executor-resource-class:
    description: specify executor resource class. Default is medium.
    type: enum
    enum: [medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
    default: medium

  registry:
    description: Name of registry
    type: string
    default: docker.io

  image:
    description: Name of image
    type: string

  pull-tag:
    description: Value for tag to pull and make publish release
    type: string
    default: dev.${CIRCLE_SHA1:0:7}

  tag-annotation:
    description: Additional text for semantic version tag
    type: string
    default: ""

  version-tag:
    description: default version release tag
    type: string
    default: ${CIRCLE_TAG}

  release-tag:
    description: Value for an additional release tag.
    type: string
    default: ""

  on-tag:
    description: generate release notes based on changes between last ne previous tag
    type: boolean
    default: false

  extra-release-args:
    description: Extra flags to pass to gren
    type: string
    default: ""

  before-release:
    description: Optional steps to run prior to gren release.
    type: steps
    default: []

  clean-tags:
    description: steps to perform when cleaning up development tags
    type: steps
    default: []

  sign-image:
    description: Sign OCI image using cosign
    type: boolean
    default: false

  cosign-attestations:
    description: attestations to include in signature
    type: string
    default: ""

  cosign-sign-key:
    description: path to private key used to sign image
    type: string
    default: cosign.key

  cosign-verify-key:
    description: path to public key used to verify signature
    type: string
    default: cosign.pub

  cosign-passphrase:
    description: signing key passphrase
    type: env_var_name
    default: COSIGN_PASSWORD

  sbom:
    description: include a software bill of materials with the signature
    type: boolean
    default: false

  sbom-filename:
    description: name of generate sbom file
    type: string
    default: sbom.spdx

  after-checkout:
    description: Optional steps to run after checking out the code.
    type: steps
    default: []

  before-publish:
    description: Optional steps to run before publishing the docker image.
    type: steps
    default: []

  after-publish:
    description: Optional steps to run after publishing the docker image.
    type: steps
    default: []

steps:
  - checkout
  - setup_remote_docker
  - when:
      name: Run after-checkout lifecycle hook steps.
      condition: << parameters.after-checkout >>
      steps: << parameters.after-checkout >>
  - confirm-registry:
      registry: << parameters.registry >>
      registry-login: << parameters.registry-login >>
      registry-password: << parameters.registry-password >>
  - pull:
      registry: << parameters.registry >>
      image: << parameters.image >>
      tag: << parameters.pull-tag >>
  - tag:
      registry: << parameters.registry >>
      image: << parameters.image >>
      current-tag: << parameters.pull-tag >>
      release-tag: << parameters.tag-annotation >><< parameters.version-tag >>
  - when:
      name: tag additional release tag
      condition: << parameters.release-tag >>
      steps:
        - tag:
            registry: << parameters.registry >>
            image: << parameters.image >>
            current-tag: << parameters.pull-tag >>
            release-tag: << parameters.release-tag >>
  - push:
      registry: << parameters.registry >>
      image: << parameters.image >>
      tag: << parameters.tag-annotation >><< parameters.version-tag >>
  - when:
      name: push additional release tag
      condition: << parameters.release-tag >>
      steps:
        - push:
            registry: << parameters.registry >>
            image: << parameters.image >>
            tag: << parameters.release-tag >>
  - when:
      name: Run after-publish lifecycle hook steps.
      condition: << parameters.after-publish >>
      steps: << parameters.after-publish >>
  - when:
      name: Sign image using cosign
      condition: << parameters.sign-image >>
      steps:
        - sign:
            registry: << parameters.registry >>
            image: << parameters.image >>
            tag: << parameters.release-tag >>
            cosign-attestations: << parameters.cosign-attestations >>
            cosign-sign-key: << parameters.cosign-sign-key >>
            cosign-verify-key: << parameters.cosign-verify-key >>
            cosign-passphrase: << parameters.cosign-passphrase >>

  # - when:
  #     name: generate sbom using syft
  #     condition: << parameters.sbom >>
  #     steps:
  #       - sbom:
  #           registry: << parameters.registry >>
  #           registry-login: << parameters.registry-login >>
  #           registry-password: << parameters.registry-password >>
  #           sbom-filename: << parameters.sbom-filename >>
  # - when:
  #     name: clean up development (dev.SHA1) tags
  #     condition: << parameters.clean-tags >>
  #     steps: << parameters.clean-tags >>
